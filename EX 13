AIM:
To implement the Minimax algorithm for a two-player turn-based game where players take turns subtracting 1 or 2 from a starting number, and the player who reduces the number to 0 loses.

ALGORITHM:
Start with a given number (e.g., 10).
Define the minimax(state, is_computer_turn) function:
If state == 0, return:
-1 if it's the computer's turn (computer loses).
1 if it's the player's turn (player loses).
If it's the computer's turn:
Set best_score = -∞.
For each move (1 or 2):
Recursively call minimax(state - move, False).
Update best_score = max(best_score, result).
Return best_score.
If it's the player's turn:
Set best_score = +∞.
For each move (1 or 2):
Recursively call minimax(state - move, True).
Update best_score = min(best_score, result).
Return best_score.
Define get_best_move(state) to return the best move for the computer by applying the minimax function.
In the play_game() function:
Alternate turns between player and computer.
Subtract 1 or 2 based on input or computed move.
Check for game over when state == 0.
End.

def minimax(number, is_computer_turn):
    if number == 0:
        return -1 if is_computer_turn else 1  # If number is 0, current player loses

    if is_computer_turn:
        best_score = float('-inf')
        for move in [1, 2]:
            if number - move >= 0:
                score = minimax(number - move, False)
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for move in [1, 2]:
            if number - move >= 0:
                score = minimax(number - move, True)
                best_score = min(best_score, score)
        return best_score

def get_best_move(number):
    best_move = None
    best_score = float('-inf')
    for move in [1, 2]:
        if number - move >= 0:
            score = minimax(number - move, False)
            if score > best_score:
                best_score = score
                best_move = move
    return best_move

def play_game():
    number = 10
    print("Game Start! Number is 10.")
    while number > 0:
        print(f"\nCurrent number: {number}")
        player_move = int(input("Your move (1 or 2): "))
        if player_move not in [1, 2] or player_move > number:
            print("Invalid move! Try again.")
            continue
        number -= player_move
        if number == 0:
            print("You made the number 0. You lose!")
            break

        # Computer's turn
        comp_move = get_best_move(number)
        print(f"Computer plays: {comp_move}")
        number -= comp_move
        if number == 0:
            print("Computer made the number 0. You win!")
            break

if __name__ == "__main__":
    play_game()

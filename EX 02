def print_board(board, N):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, N):
    for i in range(row):
        if board[i][col]:
            return False

    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j]:
            return False

    for i, j in zip(range(row-1, -1, -1), range(col+1, N)):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row, N):
    if row == N:
        return True

    for col in range(N):
        if is_safe(board, row, col, N):
            board[row][col] = 1
            if solve_n_queens(board, row + 1, N):
                return True
            board[row][col] = 0  
    return False

if __name__ == "__main__":
    try:
        N = int(input("Enter number of queens (N): "))
        if N < 1:
            print(" Number must be at least 1.")
        else:
            board = [[0]*N for _ in range(N)]
            if solve_n_queens(board, 0, N):
                print(f"\n One solution for {N}-Queens:")
                print_board(board, N)
            else:
                print(f" No solution exists for {N}-Queens.")
    except ValueError:
        print(" Please enter a valid integer.")
